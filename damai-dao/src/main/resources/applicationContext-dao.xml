<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/util
      					http://www.springframework.org/schema/util/spring-util.xsd 
                        http://www.springframework.org/schema/cache 
                        http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- 配置AOP -->
	<aop:aspectj-autoproxy />

	<!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
	<context:component-scan base-package="com.damai.dao" />

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>

	<!--master 配置数据源 -->
	<bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" abstract="true" init-method="init">
		<property name="driverClassName">
			<value>${master.jdbc.driverClassName}</value>
		</property>
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="30" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="5" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="5" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="false" />
		<property name="maxOpenPreparedStatements" value="100" />
		<!-- 打开removeAbandoned功能(连接泄漏监测，怀疑存在泄漏之后再打开) -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
	</bean>

	<bean id="masterDataSource" parent="parentDataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<property name="url">
			<value>${master.jdbc.url}</value>
		</property>
		<property name="username">
			<value>${master.jdbc.username}</value>
		</property>
		<property name="password">
			<value>${master.jdbc.password}</value>
		</property>
	</bean>

	<!--slave 配置数据源 -->
	<bean id="slaveDataSource1" parent="parentDataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<property name="url">
			<value>${slave1.jdbc.url}</value>
		</property>
		<property name="username">
			<value>${slave1.jdbc.username}</value>
		</property>
		<property name="password">
			<value>${slave1.jdbc.password}</value>
		</property>
	</bean>

	<bean id="dataSource" class="com.damai.datasource.DynamicRoutingDataSource">
		<property name="targetDataSources">
			<map key-type="com.damai.datasource.RoutingStrategy">
				<entry key="WRITE" value-ref="masterDataSource" />
				<entry key="READ" value-ref="slaveDataSource1" />
			</map>
		</property>
		<!-- 默认目标数据源为主库数据源 -->
		<property name="defaultTargetDataSource" ref="masterDataSource" />
	</bean>

	<!--Spring JdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
		<property name="mapperLocations" value="classpath:mapping/**/*Mapper.xml" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.damai.dao.mybatis" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="masterDataSource" />
	</bean>

	<bean id="readWriteSeparateAspect" class="com.damai.aspect.DBReadWriteSeparateAspect" />

	<aop:config>
		<aop:aspect ref="readWriteSeparateAspect">
			<aop:pointcut id="rw"
				expression="execution(* com.damai.service..*.*(..))" />
			<aop:before pointcut-ref="rw" method="before" />
		</aop:aspect>
	</aop:config>

	<!-- Activiti begin -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" /><!--事务管理 -->
		<property name="databaseSchemaUpdate" value="true" />
		<property name="jobExecutorActivate" value="false" />
		<property name="activityFontName" value="宋体" />
		<property name="labelFontName" value="宋体" />

	</bean>

	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>

</beans>